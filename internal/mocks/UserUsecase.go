// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	v1 "github.com/meisbokai/GolangApiTest/internal/http/domains/v1"
	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, inDom
func (_m *UserUsecase) CreateUser(ctx context.Context, inDom *v1.UserDomain) (v1.UserDomain, int, error) {
	ret := _m.Called(ctx, inDom)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 v1.UserDomain
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.UserDomain) (v1.UserDomain, int, error)); ok {
		return rf(ctx, inDom)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.UserDomain) v1.UserDomain); ok {
		r0 = rf(ctx, inDom)
	} else {
		r0 = ret.Get(0).(v1.UserDomain)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.UserDomain) int); ok {
		r1 = rf(ctx, inDom)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *v1.UserDomain) error); ok {
		r2 = rf(ctx, inDom)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *UserUsecase) DeleteUser(ctx context.Context, id string) (v1.UserDomain, int, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 v1.UserDomain
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (v1.UserDomain, int, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) v1.UserDomain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(v1.UserDomain)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllUsers provides a mock function with given fields: ctx
func (_m *UserUsecase) GetAllUsers(ctx context.Context) ([]v1.UserDomain, int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []v1.UserDomain
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]v1.UserDomain, int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []v1.UserDomain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.UserDomain)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserUsecase) GetUserByEmail(ctx context.Context, email string) (v1.UserDomain, int, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 v1.UserDomain
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (v1.UserDomain, int, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) v1.UserDomain); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(v1.UserDomain)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *UserUsecase) GetUserByID(ctx context.Context, id string) (v1.UserDomain, int, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 v1.UserDomain
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (v1.UserDomain, int, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) v1.UserDomain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(v1.UserDomain)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Login provides a mock function with given fields: ctx, inDom
func (_m *UserUsecase) Login(ctx context.Context, inDom *v1.UserDomain) (v1.UserDomain, int, error) {
	ret := _m.Called(ctx, inDom)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 v1.UserDomain
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.UserDomain) (v1.UserDomain, int, error)); ok {
		return rf(ctx, inDom)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.UserDomain) v1.UserDomain); ok {
		r0 = rf(ctx, inDom)
	} else {
		r0 = ret.Get(0).(v1.UserDomain)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.UserDomain) int); ok {
		r1 = rf(ctx, inDom)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *v1.UserDomain) error); ok {
		r2 = rf(ctx, inDom)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateUserEmail provides a mock function with given fields: ctx, oldEmail, newEmail
func (_m *UserUsecase) UpdateUserEmail(ctx context.Context, oldEmail string, newEmail string) (v1.UserDomain, int, error) {
	ret := _m.Called(ctx, oldEmail, newEmail)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserEmail")
	}

	var r0 v1.UserDomain
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (v1.UserDomain, int, error)); ok {
		return rf(ctx, oldEmail, newEmail)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) v1.UserDomain); ok {
		r0 = rf(ctx, oldEmail, newEmail)
	} else {
		r0 = ret.Get(0).(v1.UserDomain)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) int); ok {
		r1 = rf(ctx, oldEmail, newEmail)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, oldEmail, newEmail)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
